Git հրամանները և դրանց բացատրությունը:

Հիմնական GIT հրամաններ


Հիմնական GIT հրամաններ
Հիմնական GIT հրամաններ
Պետք է սովորել որոշ հիմնական GIT հրամաններ: Դուք ճիշտ տեղում եք եկել: Կարդացեք՝ բացահայտելու մեր հարմար խաբեության թերթիկը, որը կարող եք օգտագործել ամենօրյա հղումների համար:

Եկեք սկսենք!


Հասկանալով GIT աշխատանքային հոսքը
GIT-ն ամենալայն օգտագործվող բաց կոդով VCS-ն է (տարբերակի կառավարման համակարգ), որը թույլ է տալիս հետևել ֆայլերում կատարված փոփոխություններին: Ընկերությունները և ծրագրավորողները սովորաբար օգտագործում են GIT՝ ծրագրային ապահովման և հավելվածների մշակման համար համագործակցելու համար:

GIT նախագիծը բաղկացած է երեք հիմնական բաժիններից՝ աշխատանքային գրացուցակ, բեմադրության տարածք և git գրացուցակ:

Աշխատանքային գրացուցակը այն վայրն է, որտեղ դուք ավելացնում, ջնջում և խմբագրում եք ֆայլերը: Այնուհետև փոփոխությունները բեմադրվում են (ինդեքսավորվում) բեմադրության տարածքում։ Փոփոխությունները կատարելուց հետո փոփոխությունների պատկերը կպահվի git գրացուցակում:

Բոլորը կարող են օգտագործել GIT-ը, քանի որ այն հասանելի է Linux-ի, Windows-ի, Mac-ի և Solaris-ի համար: Ծրագիրը կարող է ունենալ կտրուկ ուսուցման կոր, բայց կան բազմաթիվ GIT ձեռնարկներ, որոնք պատրաստ են ձեզ օգնելու:

Հիմնական GIT հրամաններ
Ահա մի քանի հիմնական GIT հրամաններ, որոնք դուք պետք է իմանաք.

git init-ը կստեղծի նոր տեղական GIT պահոց: Հետևյալ Git հրամանը կստեղծի պահոց ընթացիկ գրացուցակում.
git init
Որպես այլընտրանք, դուք կարող եք ստեղծել շտեմարան նոր գրացուցակի մեջ՝ նշելով նախագծի անունը.
git init [նախագծի անվանումը]
git clone-ն օգտագործվում է պահեստը պատճենելու համար: Եթե պահեստը գտնվում է հեռավոր սերվերի վրա, օգտագործեք՝
git clone username@host:/path/to/repository
Ընդհակառակը, գործարկեք հետևյալ հիմնական հրամանը՝ տեղական պահեստը պատճենելու համար.
git clone /ուղի/դեպի/պահեստ
git add-ն օգտագործվում է բեմադրության տարածք ֆայլեր ավելացնելու համար: Օրինակ, հիմնական Git հետևյալ հրամանը ինդեքսավորելու է temp.txt ֆայլը.
git ավելացնել <temp.txt>
git commit-ը կստեղծի փոփոխությունների պատկերը և կպահի այն git գրացուցակում:
git commit –m «Հաղորդագրություն՝ commit-ի հետ գնալու համար այստեղ»
git config-ը կարող է օգտագործվել օգտվողին հատուկ կազմաձևման արժեքներ սահմանելու համար, ինչպիսիք են էլ. փոստը, օգտվողի անունը, ֆայլի ձևաչափը և այլն: Պատկերացնելու համար էլփոստի ստեղծման հրամանը կունենա հետևյալ տեսքը.
git config --global user.email youremail@example.com
-գլոբալ դրոշը GIT-ին ասում է, որ դուք պատրաստվում եք օգտագործել այդ էլ.փոստը բոլոր տեղական պահեստների համար: Եթե ցանկանում եք տարբեր էլփոստեր օգտագործել տարբեր պահեստների համար, օգտագործեք ստորև նշված հրամանը.
git config --local user.email youremail@example.com
git status-ը ցուցադրում է փոփոխված ֆայլերի ցանկը այն ֆայլերի հետ, որոնք դեռ պետք է բեմադրվեն կամ կատարվեն:
git կարգավիճակը
git push-ն օգտագործվում է լոկալ պարտավորություններ հեռակա պահոցի գլխավոր մասնաճյուղ ուղարկելու համար: Ահա հիմնական կոդի կառուցվածքը.
git push origin <master>
Փոխարինեք այն ճյուղով, որտեղ ցանկանում եք կատարել ձեր փոփոխությունները, երբ դուք չեք պատրաստվում անցնել հիմնական մասնաճյուղ:


git checkout-ը ստեղծում է մասնաճյուղեր և օգնում ձեզ նավարկելու դրանց միջև: Օրինակ, հետևյալ հիմնական հրամանը ստեղծում է նոր մասնաճյուղ և ավտոմատ կերպով փոխարկում ձեզ դրան.
հրաման git checkout -b <branch-name>
Մի ճյուղից մյուսը անցնելու համար պարզապես օգտագործեք.
git checkout <branch-name>
git remote-ը թույլ է տալիս դիտել բոլոր հեռավոր պահոցները: Հետևյալ հրամանը ցույց կտա բոլոր կապերը իրենց URL-ների հետ միասին.
git remote –v
Տեղական պահեստը հեռավոր սերվերին միացնելու համար օգտագործեք ստորև նշված հրամանը.
git remote ավելացնել ծագումը <host-or-remoteURL>
Միևնույն ժամանակ, հետևյալ հրամանը կջնջի կապը նշված հեռավոր պահեստի հետ.
git remote rm <պահեստի անվանումը>
git մասնաճյուղը կցուցադրի, կստեղծի կամ կջնջի մասնաճյուղերը: Օրինակ, եթե ցանկանում եք թվարկել պահեստում առկա բոլոր ճյուղերը, հրամանը պետք է այսպիսին լինի.
git ճյուղ
Եթե ցանկանում եք ջնջել մասնաճյուղը, օգտագործեք.
git ճյուղ –d <branch-name>
git pull-ը միավորում է հեռավոր պահոցում առկա բոլոր փոփոխությունները տեղական աշխատանքային գրացուցակում:
git pull
git merge-ն օգտագործվում է ճյուղը ակտիվի մեջ միացնելու համար:
git merge <branch-name>
git diff-ը թվարկում է կոնֆլիկտները: Բազային ֆայլի դեմ հակասությունները դիտելու համար օգտագործեք
git diff --base <file-name>
Հետևյալ հիմնական հրամանն օգտագործվում է ճյուղերի միջև կոնֆլիկտները դիտելու համար՝ նախքան դրանք միաձուլելը.
git diff <source-branch> <target-branch>
Բոլոր առկա հակամարտությունները թվարկելու համար օգտագործեք.
git diff
git tag-ը նշում է կոնկրետ պարտավորություններ: Մշակողները սովորաբար օգտագործում են այն՝ նշելու թողարկման կետերը, ինչպիսիք են v1.0 և v2.0:
git tag <insert-commitID-here>
git log-ն օգտագործվում է պահեստի պատմությունը տեսնելու համար՝ թվարկելով որոշակի պարտավորությունների մանրամասները: Հրամանի գործարկումը կստանաք հետևյալ տեսքը.
կատարել 15f4b6c44b3c8344caasdac9e4be13246e21sadw
Հեղինակ՝ Ալեքս Հանթեր <alexh@gmail.com>
Ամսաթիվ՝ Mon Oct 1 12:56:29 2016 -0600
git reset հրամանը կվերակայի ինդեքսը և աշխատանքային գրացուցակը վերջին git commit վիճակին:
git reset - կոշտ HEAD
git rm-ը կարող է օգտագործվել ինդեքսից և աշխատանքային գրացուցակից ֆայլերը հեռացնելու համար:
git rm filename.txt
git stash հրամանը ժամանակավորապես կպահի փոփոխությունները, որոնք պատրաստ չեն կատարման: Այդ կերպ դուք կարող եք հետագայում վերադառնալ այդ նախագծին:
git stash.
