What is rebasing?

Ի՞նչ է վերաբազավորումը:

Rebasing
Git-ում փոփոխությունները մի ճյուղից մյուսը ինտեգրելու երկու հիմնական եղանակ կա՝ միաձուլումը և վերահիմնավորումը: Այս բաժնում դուք կիմանաք, թե ինչ է rebasing-ը, ինչպես դա անել, ինչու է այն բավականին զարմանալի գործիք և որ դեպքերում չեք ցանկանա օգտագործել այն:

Հիմնական վերաբաշխում
Եթե վերադառնաք Basic Merging-ի ավելի վաղ օրինակին, կարող եք տեսնել, որ դուք շեղել եք ձեր աշխատանքը և պարտավորություններ եք կատարել երկու տարբեր ճյուղերի վրա:

Պարզ տարբերվող պատմություն
Նկար 35. Պարզ դիվերգենտ պատմություն
Մասնաճյուղերը ինտեգրելու ամենահեշտ ձևը, ինչպես մենք արդեն անդրադարձել ենք, միաձուլման հրամանն է: Այն կատարում է եռակողմ միաձուլում երկու ճյուղերի վերջին նկարների (C3 և C4) և երկուսի ամենավերջին ընդհանուր նախահայրի (C2) միջև՝ ստեղծելով նոր լուսանկար (և կատարել):

Միաձուլում` տարաբնույթ աշխատանքային պատմության ինտեգրման համար
Գծապատկեր 36. Միաձուլում՝ տարաբնույթ աշխատանքային պատմությունը ինտեգրելու համար
Այնուամենայնիվ, կա ևս մեկ ճանապարհ. կարող եք վերցնել C4-ում ներդրված փոփոխության կարկատելը և այն կրկին կիրառել C3-ի վերևում: Git-ում սա կոչվում է rebasing: Rebase հրամանով դուք կարող եք վերցնել բոլոր փոփոխությունները, որոնք կատարվել են մեկ ճյուղում և վերարտադրել դրանք մեկ այլ ճյուղում:

Այս օրինակի համար դուք պետք է ստուգեք փորձի ճյուղը, այնուհետև այն վերակառուցեք հիմնական ճյուղի վրա հետևյալ կերպ.

$ git վճարման փորձ
$ git rebase վարպետ
Նախ, գլուխը ետ շրջեք՝ վերևից ձեր աշխատանքը վերարտադրելու համար...
Կիրառվում է․ ավելացված է փուլային հրաման
Այս օպերացիան աշխատում է՝ գնալով երկու ճյուղերի ընդհանուր նախահայրին (մեկը, որի վրա դուք գտնվում եք և այն, որի վրա հիմնվում եք), ստանալով տարբերությունը, որը ներկայացվում է ձեր գործող ճյուղի յուրաքանչյուր կատարման կողմից՝ պահպանելով այդ տարբերությունները ժամանակավոր: ֆայլեր, վերակայելով ընթացիկ ճյուղը նույն commit-ի, ինչ մասնաճյուղի վրա, որի վրա վերահիմնվում եք, և վերջապես հերթով կիրառելով յուրաքանչյուր փոփոխություն:

«C4»-ում ներկայացված փոփոխությունը «C3»-ի վերահիմնավորում
Նկար 37. C4-ում ներկայացված փոփոխությունը C3-ի վերահիմնավորում
Այս պահին դուք կարող եք վերադառնալ գլխավոր մասնաճյուղ և կատարել արագ առաջ միաձուլում:

$ git վճարման վարպետ
$ git միաձուլման փորձ
«Վարպետ» մասնաճյուղի արագ փոխանցում
Նկար 38. Հիմնական ճյուղի արագ փոխանցում
Այժմ, C4'-ի մատնանշած ակնթարթը ճիշտ նույնն է, ինչ C5-ի կողմից մատնանշված միաձուլման օրինակում: Ինտեգրման վերջնական արդյունքի մեջ տարբերություն չկա, սակայն վերահիմնավորումն ավելի մաքուր պատմություն է ստեղծում: Եթե դուք ուսումնասիրում եք վերահիմնավորված ճյուղի մատյանը, այն կարծես գծային պատմություն է. թվում է, որ ամբողջ աշխատանքը կատարվել է հաջորդականությամբ, նույնիսկ այն դեպքում, երբ սկզբում տեղի է ունեցել զուգահեռ:

Հաճախ, դուք դա կանեք, որպեսզի համոզվեք, որ ձեր պարտավորությունները մաքուր կերպով կկիրառվեն հեռավոր ճյուղի վրա, թերևս մի նախագծում, որին փորձում եք նպաստել, բայց չեք պահպանում: Այս դեպքում, դուք կկատարեիք ձեր աշխատանքը մասնաճյուղում, այնուհետև կվերաբացեիք ձեր աշխատանքը սկզբնաղբյուր/վարպետի վրա, երբ պատրաստ լինեք ներկայացնել ձեր patches-ը հիմնական նախագծին: Այդ կերպ, սպասարկողը պարտավոր չէ որևէ ինտեգրացիոն աշխատանք կատարել՝ «պարզապես արագ առաջ կամ մաքուր կիրառում»:

Նկատի ունեցեք, որ այն լուսանկարը, որը մատնանշվում է վերջնական հանձնառության կողմից, որով դուք ավարտվում եք, անկախ նրանից, թե դա վերահիմնավորված հանձնառություններից վերջինն է վերաբացման համար, թե վերջնական միաձուլման կատարումը միաձուլումից հետո, նույն պատկերն է —միայն պատմությունն է տարբերվում: Rebasing replays-ը փոխվում է աշխատանքի մի տողից մյուսը իրենց ներդրման հերթականությամբ, մինչդեռ միաձուլումը վերցնում է վերջնակետերը և միացնում դրանք միասին:

Ավելի հետաքրքիր վերափոխումներ
Դուք կարող եք նաև ունենալ ձեր rebase replay-ը այլ բանի վրա, քան rebase թիրախ ճյուղը: Վերցրեք պատմությունը, ինչպիսին է պատմությունը, որի թեման ճյուղավորվում է մեկ այլ թեմայի ճյուղից, օրինակ: Դուք ճյուղավորեցիք թեմայի ճյուղը (սերվերը)՝ ձեր նախագծին սերվերի կողմից որոշ գործառույթներ ավելացնելու համար, և կատարեցիք պարտավորություն: Այնուհետև դուք ճյուղավորեցիք դա՝ հաճախորդի կողմից փոփոխություններ կատարելու համար (հաճախորդ) և մի քանի անգամ կատարեցիք: Վերջապես, դուք վերադարձաք ձեր սերվերի մասնաճյուղ և կատարեցիք ևս մի քանի պարտավորություններ:

Պատմություն՝ թեմայի հետ մեկ այլ թեմայի ճյուղից
Նկար 39. Պատմություն, որի թեման ճյուղավորվում է մեկ այլ թեմայի ճյուղից
Ենթադրենք, դուք որոշել եք, որ ցանկանում եք միաձուլել ձեր հաճախորդի կողմից կատարված փոփոխությունները ձեր հիմնական ցանցի մեջ՝ թողարկման համար, բայց ցանկանում եք հետ պահել սերվերի կողմից կատարված փոփոխությունները, մինչև այն հետագայում փորձարկվի: Դուք կարող եք կատարել փոփոխությունները հաճախորդի վրա, որոնք սերվերում չեն (C8 և C9) և վերարտադրել դրանք ձեր հիմնական մասնաճյուղում՝ օգտագործելով git rebase-ի --onto տարբերակը:

$ git rebase - գլխավոր սերվերի հաճախորդի վրա
Սա հիմնականում ասում է. «Վերցրեք հաճախորդի մասնաճյուղը, պարզեք patches-ը, քանի որ այն շեղվել է սերվերի ճյուղից, և վերարտադրեք այս patches-ը հաճախորդի մասնաճյուղում, կարծես դրա փոխարեն այն ուղղակիորեն հիմնված է հիմնական ճյուղից»: Դա մի փոքր բարդ է, բայց արդյունքը բավականին հիանալի է:

Թեմայի վերաբաժանում մեկ այլ թեմայի ճյուղից
Նկար 40. Թեմայի վերաբաժանում մեկ այլ թեմայի ճյուղից
Այժմ դուք կարող եք արագ փոխանցել ձեր հիմնական մասնաճյուղը (տե՛ս «Արագ վերահասցեավորում» ձեր հիմնական մասնաճյուղը՝ ներառելու հաճախորդի մասնաճյուղի փոփոխությունները).

$ git վճարման վարպետ
$ git միաձուլման հաճախորդ
Արագ փոխանցեք ձեր «հիմնական» մասնաճյուղը՝ ներառելու հաճախորդի մասնաճյուղի փոփոխությունները
Նկար 41. Արագ փոխանցեք ձեր գլխավոր մասնաճյուղը՝ ներառելու հաճախորդի մասնաճյուղի փոփոխությունները
Ենթադրենք, դուք որոշել եք միացնել ձեր սերվերը br
